-- Supabase/Postgres schema for unified sales & operations warehouse

create extension if not exists "pgcrypto";

create schema if not exists raw;
create schema if not exists dw;
create schema if not exists mart;

do $$
begin
    if not exists (
        select 1 from information_schema.tables
        where table_schema = 'dw' and table_name = 'dim_customer'
    ) then
        create table dw.dim_customer (
            customer_id text primary key,
            customer_name text not null,
            contact_name text,
            phone text,
            fax text,
            bill_to text,
            balance_total numeric(18,2) default 0,
            market text,
            merchant_group text,
            xero_account_number text,
            created_at timestamptz default timezone('utc', now()),
            updated_at timestamptz default timezone('utc', now())
        );
    end if;

    if not exists (
        select 1 from information_schema.tables
        where table_schema = 'dw' and table_name = 'dim_customer_cluster'
    ) then
        create table dw.dim_customer_cluster (
            customer_id text references dw.dim_customer(customer_id) on delete cascade,
            cluster_id integer not null,
            cluster_name text,
            latitude numeric,
            longitude numeric,
            primary key (customer_id, cluster_id)
        );
    end if;

    if not exists (
        select 1 from information_schema.tables
        where table_schema = 'dw' and table_name = 'dim_cluster'
    ) then
        create table dw.dim_cluster (
            cluster_id integer primary key,
            cluster_label text,
            customer_count integer,
            example_customers text,
            cluster_summary text
        );
    end if;

    if not exists (
        select 1 from information_schema.tables
        where table_schema = 'dw' and table_name = 'dim_product'
    ) then
        create table dw.dim_product (
            product_id bigint primary key,
            product_code text,
            item_name text,
            item_description text,
            product_group text,
            price numeric(18,2),
            gross_price numeric(18,2),
            created_at timestamptz default timezone('utc', now()),
            updated_at timestamptz default timezone('utc', now())
        );
    end if;

    if not exists (
        select 1 from information_schema.tables
        where table_schema = 'dw' and table_name = 'fct_invoice'
    ) then
        create table dw.fct_invoice (
            invoice_number text not null,
            document_type text,
            invoice_date date not null,
            lines integer,
            net_amount numeric(18,2),
            customer_id text references dw.dim_customer(customer_id),
            customer_name text,
            primary key (invoice_number, invoice_date)
        );
    end if;

    if not exists (
        select 1 from information_schema.tables
        where table_schema = 'dw' and table_name = 'fct_sales_line'
    ) then
        create table dw.fct_sales_line (
            sales_line_id bigint generated by default as identity primary key,
            invoice_number text not null,
            invoice_date date not null,
            document_type text,
            customer_id text references dw.dim_customer(customer_id),
            customer_name text,
            product_id bigint references dw.dim_product(product_id),
            product_code text,
            item_name text,
            qty numeric(18,4),
            unit_price numeric(18,4),
            line_amount numeric(18,4),
            load_source text not null default 'unknown',
            loaded_at timestamptz default timezone('utc', now()),
            constraint fct_sales_line_uk unique (invoice_number, product_id, item_name, load_source)
        );
    end if;

    if not exists (
        select 1 from information_schema.tables
        where table_schema = 'dw' and table_name = 'sync_state'
    ) then
        create table dw.sync_state (
            pipeline_name text primary key,
            last_success_at timestamptz,
            last_invoice_date date
        );
    end if;

    if not exists (
        select 1 from information_schema.tables
        where table_schema = 'dw' and table_name = 'etl_run_log'
    ) then
        create table dw.etl_run_log (
            run_id uuid primary key default gen_random_uuid(),
            pipeline_name text not null,
            status text not null,
            started_at timestamptz not null default timezone('utc', now()),
            finished_at timestamptz,
            processed_rows integer,
            error_message text
        );
    end if;
end$$;

-- Convenience indexes
create index if not exists idx_fct_sales_line_invoice_date on dw.fct_sales_line(invoice_date);
create index if not exists idx_fct_sales_line_customer on dw.fct_sales_line(customer_id);
create index if not exists idx_fct_sales_line_product on dw.fct_sales_line(product_id);
create index if not exists idx_fct_invoice_invoice_date on dw.fct_invoice(invoice_date);
